#include <SdFat.h>          // Librairie pour la carte SD*
#include "DS1307.h"         // Librairie pour le module RTC
#include <forcedClimate.h>  // Librairie pour le capteur BME280
#include <Wire.h>           // Librairie pour le bus I2C
#include <SoftwareSerial.h> // Librairie pour le port série du GPS

SdFat SD;                                      // SD card library
SoftwareSerial SoftSerial(8, 9);               // RX, TX
ForcedClimate climateSensor = ForcedClimate(); // BME280 library
DS1307 clock;                                  // Utilisation du module DS1307 avec RTCLib
File dataFile;                                 // Fichier de données

unsigned long startTime = millis(); // Temps de démarrage du programme

void setup()
{
  Serial.begin(9600);     // Initialisation du port série
  Wire.begin();           // Initialisation du bus I2C
  SoftSerial.begin(9600); // Initialisation du port série du GPS
  climateSensor.begin();  // Initialisation du capteur BME280
  if (!SD.begin(4))       // Initialisation de la carte SD
  {
    Serial.println(F("Card failed, or not present"));
    while (1)
      ;
  }
  clock.begin();
  clock.fillByYMD(2023, 11, 4);
  clock.fillByHMS(atoi(__TIME__), atoi(__TIME__ + 3), atoi(__TIME__ + 6));
  clock.setTime(); // Écrire l'heure dans la puce RTC
}

String getGps() // Fonction de récupération des données GPS
{
  String gpsData = "";        // Variable de stockage des données GPS
  if (SoftSerial.available()) // Si le port série du GPS est disponible
  {
    bool t = true;
    while (t)
    {
      gpsData = SoftSerial.readStringUntil('\n'); // Lecture des données GPS
      if (gpsData.startsWith(F("$GPGGA"), 0))     // Si la ligne démare avec $GPGAA, il s'agit d'une mesure du GPS
      {
        t = false;
      }
    }
  }
  gpsData[strlen(gpsData.c_str()) - 1] = '\0'; // Suppression du dernier caractère de la chaîne de caractère (le caractère de fin de ligne
  return gpsData;                              // Retourne les données GPS
}

String nom(int i) // Fonction de création du nom du fichier
{
  return String(clock.dayOfMonth) + String(clock.month) + String(clock.year) + F("_") + String(i) + F(".log"); // Retourne le nom du fichier
}

void prnt(File f) // Fonction d'écriture dans le fichier
{
  Serial.println(F("Getting Data"));
  climateSensor.takeForcedMeasurement();
  f.print(String(clock.hour) + F(":") + String(clock.minute) + F(":") + String(clock.second)); // Ecriture de l'heure
  f.print(F(" ; "));                                                                           // Ecriture du séparateur
  f.print(getGps());                                                                           // Ecriture des données GPS
  f.print(F(" ; "));                                                                           // Ecriture du séparateur
  f.print(analogRead(A0));                                                                     // Ecriture de la luminosité
  f.print(F(" ; "));                                                                           // Ecriture du séparateur
  f.print(climateSensor.getTemperatureCelcius());                                              // Ecriture de la température
  f.print(F(" ; "));                                                                           // Ecriture du séparateur
  f.print(climateSensor.getRelativeHumidity());                                                // Ecriture de l'humidité
  f.print(F(" ; "));                                                                           // Ecriture du séparateur
  f.println(climateSensor.getPressure());                                                      // Ecriture de la pression
  f.close();                                                                                   // Fermeture du fichier
}

void ecriture() // Fonction de gestion de l'écriture dans le fichier sur la carte SD
{
  static int rev = 0;                     // Variable de stockage du numéro de révision du fichier
  static int folder = 0;                  // Variable de stockage du numéro du dossier
  static String work = nom(0);            // Variable de stockage du nom du fichier
  static String fileName = nom(rev);      // Variable de stockage du nom du fichier
  static String folderName = nom(folder); // Variable de stockage du nom du dossier

  if (SD.freeClusterCount() < 1) // Si la carte SD est pleine (ou presque) on passe en mode erreur
  {
    Serial.println(F("SD card is full"));
    while (1)
      ;
  }
  else
  {
    // Si le dossier existe déjà, on se mets dedans
    SD.chdir();
    if (SD.exists(folderName))
    {
    writeFile:
      SD.chdir(folderName);
      Serial.println(F("Folder exists"));

      // Si le fichier existe déjà on l'ouvre
      if (SD.exists(work))
      {
        // Open file
        File dataFile = SD.open(work, FILE_WRITE);
        Serial.println(F("File exists"));

        // Check if file size is too large
        if (dataFile.size() >= 100) // Si le fichier dépasse la taille maximale
        {
          // Close file
          dataFile.close();
          Serial.println(F("File too large"));

          String fileName = nom(rev); // Création du nom du nouveau fichier
          while (SD.exists(fileName)) // Tant que le fichier existe
          {
            rev += 1; // Incrémentation du numéro de révision
            if (rev > 9)
            {
              Serial.println(F("Folder full\nCreating new folder"));
              rev = 0; // Si le numéro de révision dépasse 9, on le réinitialise
              folder++;
              SD.chdir();               // On se place à la racine
              SD.mkdir(String(folder)); // On crée le dossier
              SD.chdir(String(folder)); // On se place dans le dossier
            }
            fileName = nom(rev); // Création du nom du nouveau fichier (le fichier va être nommé avec le numéro de révision le plus proche du précédent plus élevé disponible)
          };

          SD.rename(work, fileName); // Renommage du fichier
          goto workfile;             // On crée un nouveau fichier d'écriture avec le bon nom
        }
        else // Si le fichier n'est pas trop gros, on écrit dedans les données mesurées
        {
          Serial.println(F("Writing data"));
          prnt(dataFile);
          dataFile.close();
        }
      }
      else
      {
      workfile:
        Serial.println(F("Creating file"));
        Serial.println(F("Writing data"));
        File newDataFile = SD.open(work, FILE_WRITE);                                           // Création du fichier
        newDataFile.println(F("Temps ; GPS ; Luminosite ; Temperature ; Humidite ; Pression")); // Ecriture de l'entête
        prnt(newDataFile);                                                                      // Ecriture des données
        newDataFile.close();                                                                    // Fermeture du fichier
      }
    }
    else
    {
      Serial.println(F("Folder does not exist\nCreating folder"));
      SD.chdir();           // On se place à la racine
      SD.mkdir(folderName); // On crée le dossier
      SD.chdir(folderName); // On se place dans le dossier
      goto writeFile;
    }
  }
}

void loop()
{
  unsigned long currentTime = millis(); // Récupération du temps actuel

  if ((currentTime - startTime) >= 3000)
  {
    ecriture();              // On les écrit dans le fichier
    startTime = currentTime; // On réinitialise le temps de démarrage
  }
}
