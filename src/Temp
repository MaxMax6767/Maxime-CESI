#include <Wire.h>           // Bibliothèque pour l'I2C
#include <forcedClimate.h>  // Librairie pour le capteur BME280
#include "DS1307.h"         // Bibliothèque pour la RTC
#include <ChainableLED.h>   // Librairie pour les LEDs RVB
#include <SoftwareSerial.h> // Librairie pour le port série logiciel du GPS
#include <SdFat.h>          // Librairie pour la carte SD

SdFat SD;

#define NUM_LEDS 5
SoftwareSerial gpsSerial(8, 9); // Bibliothèque GPS

const int buttonRedPin PROGMEM = 2;   // Bouton rouge
const int buttonGreenPin PROGMEM = 3; // Bouton vert
// const unsigned long longPressDuration = 5000; // Durée nécessaire pour un appui long (en millisecondes)
volatile bool redButtonPressed = false;
volatile bool greenButtonPressed = false;
int lastExecution;
volatile int mod = 0; // État actuel : 0 = Standard, 1 = Config, 2 = Maintenance, 3 = Eco
int store_mod = mod;
const unsigned long startTime = 0;
ForcedClimate climateSensor = ForcedClimate(); // BME280 library
#define SEALEVELPRESSURE_HPA (1013.25)         // Set Sea level pressure for altitude
const int lum_captor_pin PROGMEM = 0;          // Luminosity captor on A2 port on Grove Shield
DS1307 clock;                                  // Object of DS1307 class RTC Clock on I2C port on Grove Shield
ChainableLED leds(6, 7, NUM_LEDS);

void interruptRed()
{
  if (maintien5sec(buttonRedPin))
  {
    redButtonPressed = true;
  }
}

void interruptGreen()
{
  if (maintien5sec(buttonGreenPin))
  {
    greenButtonPressed = true;
  }
}

void erreur(int R, int G, int B, int R2, int G2, int B2, int d) // Fonction d'erreur
{
  while (true)
  {
    leds.setColorRGB(0, R, G, B);
    delay(1000);
    leds.setColorRGB(0, R2, G2, B2);
    delay(d);
  }
}

// Fonction pour obtenir le numéro du mois en fonction de son nom
int getMonthNumber(const char *month)
{
  if (strncmp(month, "Jan", 3) == 0)
    return 1;
  if (strncmp(month, "Feb", 3) == 0)
    return 2;
  if (strncmp(month, "Mar", 3) == 0)
    return 3;
  if (strncmp(month, "Apr", 3) == 0)
    return 4;
  if (strncmp(month, "May", 3) == 0)
    return 5;
  if (strncmp(month, "Jun", 3) == 0)
    return 6;
  if (strncmp(month, "Jul", 3) == 0)
    return 7;
  if (strncmp(month, "Aug", 3) == 0)
    return 8;
  if (strncmp(month, "Sep", 3) == 0)
    return 9;
  if (strncmp(month, "Oct", 3) == 0)
    return 10;
  if (strncmp(month, "Nov", 3) == 0)
    return 11;
  if (strncmp(month, "Dec", 3) == 0)
    return 12;
  return 0; // Mois non valide
}

void setup()
{
  Serial.begin(9600);
  gpsSerial.begin(9600);
  // gpsSerial.available()
  if (!true)
  {
    Serial.println("Erreur d’accès au GPS");
    erreur(255, 0, 0, 255, 255, 0, 1000);
    return;
  }

  // Initialisation de la carte SD
  if (!SD.begin(4, SPI_FULL_SPEED))
  {
    Serial.println("Erreur d’accès ou d’écriture sur la carte SD");
    erreur(255, 0, 0, 255, 255, 255, 2000);
    return;
  }

  // Attacher les interruptions aux boutons
  attachInterrupt(digitalPinToInterrupt(buttonGreenPin), interruptGreen, LOW);
  attachInterrupt(digitalPinToInterrupt(buttonRedPin), interruptRed, LOW);

  leds.init(); // Initialisation des LEDs
  leds.setColorRGB(0, 255, 255, 255);
  climateSensor.begin();
  if (!true)
  { // Initialisation du capteur BME280
    Serial.println("Erreur d’accès du capteur BME280");
    erreur(255, 0, 0, 0, 255, 0, 1000);
    return;
  }
  // Initialiser l'horloge
  clock.begin();
  if (!true)
  {
    Serial.println("Erreur d’accès à l’horloge RTC");
    erreur(255, 0, 0, 0, 0, 255, 1000);
    return;
  }
  clock.fillByYMD(atoi(__DATE__ + 7), getMonthNumber(__DATE__), atoi(__DATE__ + 4));
  clock.fillByHMS(atoi(__TIME__), atoi(__TIME__ + 3), atoi(__TIME__ + 6));
  clock.setTime(); // Écrire l'heure dans la puce RTC
}

bool maintien5sec(int Pin)
{
  int i = 0;
  while (digitalRead(Pin) == LOW)
  {
    i += 1;
    delayMicroseconds(1000);
    if (i >= 5000)
    {
      leds.setColorRGB(0, 0, 0, 0);
      while (digitalRead(Pin) == LOW)
        ;
      return true;
    }
  }
  return false;
}

String getGPS()
{
  String trameGGA = "";

  // Boucle de lecture des données GPS (On attend d'avoir la trame GGA)
  if (gpsSerial.available())
  {
    do
    {
      // Lecture d'une ligne de données GPS
      trameGGA = gpsSerial.readStringUntil('\n');
    } while (!trameGGA.startsWith("$GPGGA", 0));
  }
  else
  {
    Serial.println("Unable to load GPS");
    while (1)
      ;
  }
  // Retour de la trame de sortie
  return trameGGA;
}

// Fonction pour obtenir l'heure au format souhaité
String getTime()
{
  String time = "";
  clock.getTime();
  time += String(clock.hour, DEC);
  time += String(":");
  time += String(clock.minute, DEC);
  time += String(":");
  time += String(clock.second, DEC);
  time += String("  ");
  time += String(clock.month, DEC);
  time += String("/");
  time += String(clock.dayOfMonth, DEC);
  time += String("/");
  time += String(clock.year + 2000, DEC);
  return time;
}

// Fonction pour imprimer les données dans un fichier
void printInFile(File f)
{
  String time = getTime();
  String temperature = String(climateSensor.getTemperatureCelcius());
  String humidity = String(climateSensor.getRelativeHumidity());
  String pressure = String(climateSensor.getPressure() / 100.0F);
  String luminosity = String(analogRead(lum_captor_pin));
  String gps = String(getGPS());

  f.print(temperature);
  f.print("; ");
  f.print(humidity);
  f.print("; ");
  f.print(pressure);
  f.print("; ");
  f.print(luminosity);
  f.print("; ");
  f.print(time);
  f.print("; ");
  f.println(gps);

  if (f)
  {
    f.flush(); // Flush les données vers la carte SD
    f.close(); // Fermez le fichier
  }
  else
  {
    Serial.println("Erreur lors de l'ouverture du fichier sur la carte SD.");
  }
}

void loop()
{
  if (redButtonPressed)
  {
    // Appui long sur le bouton rouge détecté
    redButtonPressed = false; // Réinitialiser le drapeau
    if ((millis() - startTime) < 5000)
    {
      mod = 1; // Passer en mode Config
      Serial.println("Config mod ON");
      leds.setColorRGB(0, 255, 255, 0);
    }
    else
    {
      // Changer de mode entre Maintenance et Standard (inversement)
      if (mod == 0 or mod == 3)
      {
        store_mod = mod; // Stocker le mode précédent
        mod = 2;         // Passer en mode Maintenance
        Serial.println("Maintenance mod ON");
        leds.setColorRGB(0, 255, 50, 0);
      }
      else if (mod == 2)
      {
        mod = store_mod; // Retourner au mode Précedent
        Serial.println("Standard mod ON");
        leds.setColorRGB(0, 0, 255, 0);
      }
    }
  }
  else if (greenButtonPressed)
  {
    // Appui long sur le bouton vert détecté
    greenButtonPressed = false; // Réinitialiser le drapeau
    // Changer de mode entre Eco et Standard (inversement)
    if (mod == 0)
    {
      mod = 3;       // Passer en mode Eco
      store_mod = 0; // Stocker le mode précédent (Standard)
      Serial.println("Eco mod ON");
      leds.setColorRGB(0, 0, 0, 255);
    }
    else if (mod == 3)
    {
      mod = 0; // Retourner en mode Standard
      Serial.println("Standard mod ON");
      leds.setColorRGB(0, 0, 255, 0);
    }
  }
  int now = millis();
  if ((now - startTime) > 5000)
  {
    if ((now - lastExecution) > 5000)
    {
      lastExecution = millis();
      if (mod == 0)
      { // Mode Standard
        leds.setColorRGB(0, 0, 255, 0);
        File dataFile = SD.open("luminosity.log", FILE_WRITE);
        printInFile(dataFile);
        Serial.println("Data saved");
      }
      else if (mod == 1)
      { // Mode Config
        Serial.println("Config mod ON");
        leds.setColorRGB(0, 255, 255, 0);
      }
      else if (mod == 2)
      { // Mode Maintenance
        Serial.println("Maintenance mod ON");
        leds.setColorRGB(0, 255, 50, 0);
      }
      else if (mod == 3)
      { // Mode Eco
        Serial.println("Eco mod ON");
        leds.setColorRGB(0, 0, 0, 255);
      }
      else if (mod == 1)
      {
        Serial.println("Config mod ON");
        leds.setColorRGB(0, 255, 255, 0);
      }
    }
  }
}
